1
00:00:06,460 --> 00:00:08,650
okay so let's welcome our next speaker

2
00:00:08,650 --> 00:00:11,469
Keesha and he will talk about his

3
00:00:11,469 --> 00:00:22,630
experimental unit cell okay hello hi I'm

4
00:00:22,630 --> 00:00:25,750
here to talk about extend experiment to

5
00:00:25,750 --> 00:00:27,250
make sure that I'm doing as a side

6
00:00:27,250 --> 00:00:30,340
project it's called elvish some of them

7
00:00:30,340 --> 00:00:32,469
may have thinners because this is once

8
00:00:32,469 --> 00:00:35,520
being posted on a hacker news

9
00:00:35,520 --> 00:00:38,890
well the reason I developed this gel is

10
00:00:38,890 --> 00:00:40,930
driven by two motivations wanting some

11
00:00:40,930 --> 00:00:44,140
more serious language because can see

12
00:00:44,140 --> 00:00:46,930
the code here is so it's real code it's

13
00:00:46,930 --> 00:00:49,540
real visual code from thee from Chapter

14
00:00:49,540 --> 00:00:51,280
five of the visual user guide

15
00:00:51,280 --> 00:00:54,940
I won't call a language that allows you

16
00:00:54,940 --> 00:00:56,860
to write something like this a serious

17
00:00:56,860 --> 00:00:59,379
language is more ridiculous than Perl

18
00:00:59,379 --> 00:01:05,560
even it and also a more friendly user

19
00:01:05,560 --> 00:01:08,259
interface and by friendly I actually

20
00:01:08,259 --> 00:01:10,780
mean two things why it's friendly for

21
00:01:10,780 --> 00:01:14,350
newbies it's OOP so it has to have same

22
00:01:14,350 --> 00:01:18,420
defaults so like we all know with some

23
00:01:18,420 --> 00:01:22,930
some some shall we the default is almost

24
00:01:22,930 --> 00:01:26,200
sound useable like some unnamed editor

25
00:01:26,200 --> 00:01:30,159
so and also the another another expect

26
00:01:30,159 --> 00:01:32,470
of friendliness I find is also friend is

27
00:01:32,470 --> 00:01:36,970
for for for the for this event uses so

28
00:01:36,970 --> 00:01:42,189
as to be very customizable okay so now

29
00:01:42,189 --> 00:01:45,159
we come to the language so this still

30
00:01:45,159 --> 00:01:49,329
works in elvish so you can now believe

31
00:01:49,329 --> 00:01:52,090
that it's actually a shell it's not some

32
00:01:52,090 --> 00:01:55,180
other kind of language so this stuff I

33
00:01:55,180 --> 00:01:57,310
need to explain this stuff it basically

34
00:01:57,310 --> 00:02:00,880
gets the output of the curled message

35
00:02:00,880 --> 00:02:03,189
ring and sign four lines that contain a

36
00:02:03,189 --> 00:02:06,689
and sordin and remove the application

37
00:02:06,689 --> 00:02:11,110
put it to a file yep also our

38
00:02:11,110 --> 00:02:14,529
mathematics so every time I have when I

39
00:02:14,529 --> 00:02:16,659
have to do some quick calculation with

40
00:02:16,659 --> 00:02:18,159
my computer I always have to struggle

41
00:02:18,159 --> 00:02:19,150
with an eye

42
00:02:19,150 --> 00:02:21,430
Python NBC because I patent take one

43
00:02:21,430 --> 00:02:24,010
minute to start and BC has their limited

44
00:02:24,010 --> 00:02:26,890
capability so nobody Elvis you don't

45
00:02:26,890 --> 00:02:27,909
have to struggle for this anymore

46
00:02:27,909 --> 00:02:31,170
because it has arithmetic so this is the

47
00:02:31,170 --> 00:02:34,060
division to division instead of integer

48
00:02:34,060 --> 00:02:37,359
division and the second example looks

49
00:02:37,359 --> 00:02:42,340
pretty like Lisp yes it is and you can

50
00:02:42,340 --> 00:02:46,150
have functions can does anybody know

51
00:02:46,150 --> 00:02:50,109
what that he is supposed to me yeah it's

52
00:02:50,109 --> 00:02:52,629
determinants for calculating

53
00:02:52,629 --> 00:02:56,230
determinants of 2 times 2 matrix which

54
00:02:56,230 --> 00:03:01,629
is something I do every day and tables

55
00:03:01,629 --> 00:03:04,269
and closures yeah I told you it's a

56
00:03:04,269 --> 00:03:06,519
serious language so he has datatypes

57
00:03:06,519 --> 00:03:10,049
beyond simple strings so we have tables

58
00:03:10,049 --> 00:03:13,359
tables is basically a hybrid of a list

59
00:03:13,359 --> 00:03:17,040
and the dictionary I love the one and

60
00:03:17,040 --> 00:03:20,439
actually the reason I have to combine

61
00:03:20,439 --> 00:03:23,799
them is that I run out of brackets we

62
00:03:23,799 --> 00:03:25,870
have this you know we have square

63
00:03:25,870 --> 00:03:28,060
brackets round brackets and curly

64
00:03:28,060 --> 00:03:30,549
brackets but I've run out of there I

65
00:03:30,549 --> 00:03:32,379
cannot come up with more brackets so I

66
00:03:32,379 --> 00:03:36,549
just use the square brackets for both if

67
00:03:36,549 --> 00:03:39,099
anybody has a cool suggestion please

68
00:03:39,099 --> 00:03:44,650
tell me so you see this is these two big

69
00:03:44,650 --> 00:03:46,590
hybrids so it can be indexed with either

70
00:03:46,590 --> 00:03:51,879
number or a stream and we have closures

71
00:03:51,879 --> 00:03:55,269
and now here I would present you the

72
00:03:55,269 --> 00:03:59,229
hello world program in elvish it's the

73
00:03:59,229 --> 00:04:03,400
it's a pretty Java SH way that - hello

74
00:04:03,400 --> 00:04:06,129
the world you actually first construct a

75
00:04:06,129 --> 00:04:11,190
lower Factory and it rings like this I

76
00:04:11,190 --> 00:04:14,680
explain that later and then you give a

77
00:04:14,680 --> 00:04:16,599
parameter to the factory which gives you

78
00:04:16,599 --> 00:04:19,449
a lower and it's a lower of the world

79
00:04:19,449 --> 00:04:23,070
and then you call the whole lower well I

80
00:04:23,070 --> 00:04:25,300
was actually joking because this is

81
00:04:25,300 --> 00:04:26,590
another way you actually write hello

82
00:04:26,590 --> 00:04:30,279
world and to understand this code too

83
00:04:30,279 --> 00:04:32,680
we can simply come compare it to the

84
00:04:32,680 --> 00:04:36,280
you JavaScript equivalent so you can see

85
00:04:36,280 --> 00:04:40,289
that we do have serious constructs like

86
00:04:40,289 --> 00:04:44,530
closures so closures are also first

87
00:04:44,530 --> 00:04:49,060
value first-class values as our tables

88
00:04:49,060 --> 00:04:51,430
and in traditional shells that believes

89
00:04:51,430 --> 00:04:57,250
you only have strings and yes I've

90
00:04:57,250 --> 00:04:59,770
talked about this we have many kind of

91
00:04:59,770 --> 00:05:01,600
first-class values strings tables

92
00:05:01,600 --> 00:05:04,389
closures boolean's and and they are

93
00:05:04,389 --> 00:05:07,660
actually some more and the extraordinary

94
00:05:07,660 --> 00:05:10,030
thing maybe about average is that

95
00:05:10,030 --> 00:05:11,740
command output may contain values

96
00:05:11,740 --> 00:05:13,870
instead of just pipes like the

97
00:05:13,870 --> 00:05:16,930
traditional pipeline so here's an

98
00:05:16,930 --> 00:05:21,190
example we find out the oldest articles

99
00:05:21,190 --> 00:05:24,789
of valve issues login names has the

100
00:05:24,789 --> 00:05:28,090
string broke we can see a combination of

101
00:05:28,090 --> 00:05:31,599
the traditional pipe line and the pipe

102
00:05:31,599 --> 00:05:33,430
line that actually carries discrete

103
00:05:33,430 --> 00:05:36,160
values here because we all know the curl

104
00:05:36,160 --> 00:05:39,760
command you just pulls out some some

105
00:05:39,760 --> 00:05:42,280
URLs or added content to stand out and

106
00:05:42,280 --> 00:05:48,010
to and then the past Jason command will

107
00:05:48,010 --> 00:05:50,680
take these bytes and convert them to

108
00:05:50,680 --> 00:05:54,280
values but it turns out that the this

109
00:05:54,280 --> 00:05:56,800
URL will actually give an array instead

110
00:05:56,800 --> 00:06:00,099
of many Jason's so we use unpacked

111
00:06:00,099 --> 00:06:02,560
command in elvish which turns an array

112
00:06:02,560 --> 00:06:05,800
of stuff into just Stringham stuff and

113
00:06:05,800 --> 00:06:10,120
we iterate through the stream and we

114
00:06:10,120 --> 00:06:12,880
strategize gnorga name and now we are

115
00:06:12,880 --> 00:06:15,460
getting back to bite again so to find

116
00:06:15,460 --> 00:06:18,520
out all the lines contain both which as

117
00:06:18,520 --> 00:06:24,880
described I'm getting a little bit crazy

118
00:06:24,880 --> 00:06:28,990
I have only two slides left allow the

119
00:06:28,990 --> 00:06:31,479
user interface it's not much because

120
00:06:31,479 --> 00:06:32,919
I've been working on the language

121
00:06:32,919 --> 00:06:35,380
recently but this there's still

122
00:06:35,380 --> 00:06:37,479
something pretty cool to show off I

123
00:06:37,479 --> 00:06:39,310
think it's called the navigation mode

124
00:06:39,310 --> 00:06:42,040
and because

125
00:06:42,040 --> 00:06:43,930
I believe some of you have some of you

126
00:06:43,930 --> 00:06:46,960
have used some software called Ranger it

127
00:06:46,960 --> 00:06:49,000
allows you to use your arrow keys to

128
00:06:49,000 --> 00:06:52,480
navigate in them in the console which is

129
00:06:52,480 --> 00:06:55,060
pretty cool I think and I believe that

130
00:06:55,060 --> 00:06:57,220
these functionalities better built into

131
00:06:57,220 --> 00:07:00,790
the shell so I did it and it actually

132
00:07:00,790 --> 00:07:05,520
works unlike many other things in elvish

133
00:07:05,580 --> 00:07:09,880
so well the project self is it's not

134
00:07:09,880 --> 00:07:12,220
ready and that will only call it ready

135
00:07:12,220 --> 00:07:14,530
when I use it as my own login shell a

136
00:07:14,530 --> 00:07:17,530
lot of stuff I'm missing and a lot of

137
00:07:17,530 --> 00:07:23,020
stuff are wrong yeah yeah welcome to

138
00:07:23,020 --> 00:07:27,070
contribute yes

139
00:07:27,070 --> 00:07:29,260
last time when I talked I suggest

140
00:07:29,260 --> 00:07:32,650
against putting on a hacker newspad the

141
00:07:32,650 --> 00:07:36,610
next day I saw it so if you want to do

142
00:07:36,610 --> 00:07:39,940
it go ahead oh that's the end of my

143
00:07:39,940 --> 00:07:42,190
presentation so I guess it's now time

144
00:07:42,190 --> 00:07:49,240
for questions okay thank you for your

145
00:07:49,240 --> 00:07:50,770
great presentation and sharing your

146
00:07:50,770 --> 00:07:52,870
great code with us so does anybody have

147
00:07:52,870 --> 00:07:57,660
any questions and yeah

148
00:08:06,630 --> 00:08:09,630
is

149
00:08:14,039 --> 00:08:17,910
you said you integrated Ranger features

150
00:08:17,910 --> 00:08:20,669
is it actual Ranger code or is now your

151
00:08:20,669 --> 00:08:24,169
own implementation now I cloned it okay

152
00:08:24,169 --> 00:08:27,419
this Ranger is written Python and this

153
00:08:27,419 --> 00:08:30,620
stuff is actually written in gold

154
00:08:32,630 --> 00:08:44,850
sorry it's written in gold question so

155
00:08:44,850 --> 00:08:59,399
anybody in your shell you can cost not

156
00:08:59,399 --> 00:09:02,160
just strings yes between different

157
00:09:02,160 --> 00:09:07,260
grammatical objects I am how do you make

158
00:09:07,260 --> 00:09:08,970
the distinction between strings and

159
00:09:08,970 --> 00:09:10,200
objects and how can you call that

160
00:09:10,200 --> 00:09:12,750
program to return objects rather than

161
00:09:12,750 --> 00:09:15,120
strings yeah actually the two channels

162
00:09:15,120 --> 00:09:17,850
are always present both of them so you

163
00:09:17,850 --> 00:09:19,950
can in principle you can have a command

164
00:09:19,950 --> 00:09:22,890
that that outputs both the stream and

165
00:09:22,890 --> 00:09:30,240
discrete values that's my solution at

166
00:09:30,240 --> 00:09:32,970
the idea that the pipeline carries

167
00:09:32,970 --> 00:09:35,910
values is actually stolen from from a

168
00:09:35,910 --> 00:09:39,870
Microsoft Project PowerShell but I think

169
00:09:39,870 --> 00:09:43,970
PowerShell has it tries to blur the

170
00:09:43,970 --> 00:09:46,980
boundary between the values and return

171
00:09:46,980 --> 00:09:48,810
the value pipeline and the stream

172
00:09:48,810 --> 00:09:50,399
pipeline which I think it's really bad I

173
00:09:50,399 --> 00:09:54,029
think is the best solution I've found so

174
00:09:54,029 --> 00:09:56,430
far is to make these two pipelines

175
00:09:56,430 --> 00:09:58,920
always to make these two pipes always

176
00:09:58,920 --> 00:10:02,070
present so you're actually every command

177
00:10:02,070 --> 00:10:07,050
has two inputs and two outputs sounds

178
00:10:07,050 --> 00:10:09,709
awesome thank you

179
00:10:16,970 --> 00:10:21,290
so does anybody have any more questions

180
00:10:21,290 --> 00:10:25,440
okay so yeah once again thank you see

181
00:10:25,440 --> 00:10:26,790
for your great presentation

182
00:10:26,790 --> 00:10:32,650
[Applause]

